//1.b.lex part

%{
#include "y.tab.h"
#include<stdlib.h>
extern int yylval
%}
%%
[0-9]+ {yylval=atoi(text);return NUM;}
\n {return yytext[0];}
. {return yytext[0];}

//1.b yacc part


%{
#include<stdio.h>
int valid=1;
%}

%token NUM
%left '+''-'
%right '*''/'

%%
stmt: expr '\n' {if(valid)printf("result is %d",$$);}
expr: expr '+' expr{$$=$1+$3;}
     |expr '-' expr{$$=$1-$3;}
     |expr '*' expr{$$=$1*$3;}
     |expr '/' expr{if($1/$3==0){valid=0;printf("Invalid expression\n");}
               else
               { $$=$1/$3;}}
     |'(' expr ')'{$$=$2;}
     |NUM {$$=$1;}
     ;
%%

void main(){
  printf("Enter arithmetic expression\n");
  yyparse();
  if(valid==1)
  printf("valid");
  }
  int yyerrror(){
  printf("Inavlid expresion");
  exit(0);
  }







//1a.

%{
#include<stdio.h>
#include<string.h>
void fail();
int noOfOperands=0;
int noOfOperators=0;
char operands[10][10];
char operator[10][10];
int valid=0;
%}

%%
"(" valid++;
")" valid--; if(valid<0) fail();
"+"|"*" {strcpy(operator[noOfOperators],yytext);noOfOperators++;}
[0-9]+  {strcpy(operands[noOfOperands],yytext);noOfOperands++;}
[^+*]"("[^0-9] fail();
[+*]")" fail();
%%

int main(){
int i=0;
printf("Enter a mathematical expression and press ctrl+d for output");
yylex();
printf("Number of operators are %d\n Number of operands are %d\n",noOfOperators,noOfOperands);
if(valid==0 && (noOfOperands-noOfOperators)==1){
printf("Expression is valid\n");
printf("The operands are\n");

for(i=0;i<noOfOperands;i++)
printf("%s\n",operands[i]);

printf("The operators are");
for(i=0;i<noOfOperators;i++)
printf("%s\n",operator[i]);

}

else
printf("Invalid expression");
return 0;
}

void fail(){
printf("Expression is invalid\n");
exit(0);
}

